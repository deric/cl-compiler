

  1: PROGRAM
  2:   VARS
  3: 	A ARRAY [2] OF Int
  4: 	B ARRAY [4] OF ARRAY [10] OF Int
  5:   ENDVARS
  6: 	Function p(Val X Int) Return Array [10] Of Int
  7:     	  Return B[X]
  8:         EndFunction
  9: 	Function r() Return Int
 10: 	  Return 3
 11: 	EndFunction  
 12: 	x[4].y:=1
 13: 	x.y[4]:=1
 14: 	x[((true))]:=4
 15: 	y:= x[((true))]
 16: 	-p(5)
 17: 	p:=p(5)
 18: 	x[4]:=p(5)
 19: 	x[-4].a[3]:=4
 20: 	r()
 21: 	r(1)
 22: 	m[3].u:= x[1][2][y+(a+4)]
 23: 	m[a].u[4].b.c:=4
 24: 	m[a[1]]:=4
 25: 	x[p(5)]:=y(2)
 26: 	a:=p(x[8]).y
 27: 	b:=p(f.y)[8]
 28: 	x:=p[p(x)]
 29: 	x:=p[p(x)].y
 30: 	b:=p(f.y)[8]
 31: 	b:=p(f.y)[8].a[3]
 32: 	b:=p(f.y)[8].a.b
 33: 	x:=y(a).b
 34: ENDPROGRAM
 35: 


 program
 | list
 | | ident(A)
 | | | array
 | | | | intconst(2)
 | | | | int
 | | ident(B)
 | | | array
 | | | | intconst(4)
 | | | | array
 | | | | | intconst(10)
 | | | | | int
 | list
 | | function
 | | | ident(p)
 | | | | list
 | | | | | val
 | | | | | | ident(X)
 | | | | | | int
 | | | | array
 | | | | | intconst(10)
 | | | | | int
 | | | list
 | | | list
 | | | list
 | | | [
 | | | | ident(B)
 | | | | ident(X)
 | | function
 | | | ident(r)
 | | | | list
 | | | | int
 | | | list
 | | | list
 | | | list
 | | | intconst(3)
 | list
 | | :=
 | | | .
 | | | | [
 | | | | | ident(x)
 | | | | | intconst(4)
 | | | | ident(y)
 | | | intconst(1)
 | | :=
 | | | [
 | | | | .
 | | | | | ident(x)
 | | | | | ident(y)
 | | | | intconst(4)
 | | | intconst(1)
 | | :=
 | | | [
 | | | | ident(x)
 | | | | true
 | | | intconst(4)
 | | :=
 | | | ident(y)
 | | | -
 | | | | [
 | | | | | ident(x)
 | | | | | true
 | | | | (
 | | | | | ident(p)
 | | | | | list
 | | | | | | intconst(5)
 | | :=
 | | | ident(p)
 | | | (
 | | | | ident(p)
 | | | | list
 | | | | | intconst(5)
 | | :=
 | | | [
 | | | | ident(x)
 | | | | intconst(4)
 | | | (
 | | | | ident(p)
 | | | | list
 | | | | | intconst(5)
 | | :=
 | | | [
 | | | | .
 | | | | | [
 | | | | | | ident(x)
 | | | | | | -
 | | | | | | | intconst(4)
 | | | | | ident(a)
 | | | | intconst(3)
 | | | intconst(4)
 | | (
 | | | ident(r)
 | | | list
 | | (
 | | | ident(r)
 | | | list
 | | | | intconst(1)
 | | :=
 | | | .
 | | | | [
 | | | | | ident(m)
 | | | | | intconst(3)
 | | | | ident(u)
 | | | [
 | | | | [
 | | | | | [
 | | | | | | ident(x)
 | | | | | | intconst(1)
 | | | | | intconst(2)
 | | | | +
 | | | | | ident(y)
 | | | | | +
 | | | | | | ident(a)
 | | | | | | intconst(4)
 | | :=
 | | | .
 | | | | .
 | | | | | [
 | | | | | | .
 | | | | | | | [
 | | | | | | | | ident(m)
 | | | | | | | | ident(a)
 | | | | | | | ident(u)
 | | | | | | intconst(4)
 | | | | | ident(b)
 | | | | ident(c)
 | | | intconst(4)
 | | :=
 | | | [
 | | | | ident(m)
 | | | | [
 | | | | | ident(a)
 | | | | | intconst(1)
 | | | intconst(4)
 | | :=
 | | | [
 | | | | ident(x)
 | | | | (
 | | | | | ident(p)
 | | | | | list
 | | | | | | intconst(5)
 | | | (
 | | | | ident(y)
 | | | | list
 | | | | | intconst(2)
 | | :=
 | | | ident(a)
 | | | .
 | | | | (
 | | | | | ident(p)
 | | | | | list
 | | | | | | [
 | | | | | | | ident(x)
 | | | | | | | intconst(8)
 | | | | ident(y)
 | | :=
 | | | ident(b)
 | | | [
 | | | | (
 | | | | | ident(p)
 | | | | | list
 | | | | | | .
 | | | | | | | ident(f)
 | | | | | | | ident(y)
 | | | | intconst(8)
 | | :=
 | | | ident(x)
 | | | [
 | | | | ident(p)
 | | | | (
 | | | | | ident(p)
 | | | | | list
 | | | | | | ident(x)
 | | :=
 | | | ident(x)
 | | | .
 | | | | [
 | | | | | ident(p)
 | | | | | (
 | | | | | | ident(p)
 | | | | | | list
 | | | | | | | ident(x)
 | | | | ident(y)
 | | :=
 | | | ident(b)
 | | | [
 | | | | (
 | | | | | ident(p)
 | | | | | list
 | | | | | | .
 | | | | | | | ident(f)
 | | | | | | | ident(y)
 | | | | intconst(8)
 | | :=
 | | | ident(b)
 | | | [
 | | | | .
 | | | | | [
 | | | | | | (
 | | | | | | | ident(p)
 | | | | | | | list
 | | | | | | | | .
 | | | | | | | | | ident(f)
 | | | | | | | | | ident(y)
 | | | | | | intconst(8)
 | | | | | ident(a)
 | | | | intconst(3)
 | | :=
 | | | ident(b)
 | | | .
 | | | | .
 | | | | | [
 | | | | | | (
 | | | | | | | ident(p)
 | | | | | | | list
 | | | | | | | | .
 | | | | | | | | | ident(f)
 | | | | | | | | | ident(y)
 | | | | | | intconst(8)
 | | | | | ident(a)
 | | | | ident(b)
 | | :=
 | | | ident(x)
 | | | .
 | | | | (
 | | | | | ident(y)
 | | | | | list
 | | | | | | ident(a)
 | | | | ident(b)


Type Checking:

L. 12: Identifier x is undeclared.
L. 12: Left expression of assignment is not referenceable.
L. 13: Identifier x is undeclared.
L. 13: Left expression of assignment is not referenceable.
L. 14: Identifier x is undeclared.
L. 14: Operator [] with incompatible types.
L. 14: Left expression of assignment is not referenceable.
L. 15: Identifier y is undeclared.
L. 15: Identifier x is undeclared.
L. 15: Operator [] with incompatible types.
L. 16: Operator - with incompatible types.
L. 15: Left expression of assignment is not referenceable.
L. 17: Left expression of assignment is not referenceable.
L. 18: Identifier x is undeclared.
L. 18: Left expression of assignment is not referenceable.
L. 19: Identifier x is undeclared.
L. 19: Left expression of assignment is not referenceable.
L. 20: Operator ( must be applied to a procedure in an instruction.
L. 21: Operator ( must be applied to a procedure in an instruction.
L. 21: The number of parameters in the call do not match.
L. 22: Identifier m is undeclared.
L. 22: Identifier x is undeclared.
L. 22: Identifier y is undeclared.
L. 22: Identifier a is undeclared.
L. 22: Left expression of assignment is not referenceable.
L. 23: Identifier m is undeclared.
L. 23: Identifier a is undeclared.
L. 23: Left expression of assignment is not referenceable.
L. 24: Identifier m is undeclared.
L. 24: Identifier a is undeclared.
L. 24: Left expression of assignment is not referenceable.
L. 25: Identifier x is undeclared.
L. 25: Operator [] with incompatible types.
L. 25: Identifier y is undeclared.
L. 25: Left expression of assignment is not referenceable.
L. 26: Identifier a is undeclared.
L. 26: Identifier x is undeclared.
L. 26: Operator struct. with incompatible types.
L. 26: Left expression of assignment is not referenceable.
L. 27: Identifier b is undeclared.
L. 27: Identifier f is undeclared.
L. 27: Left expression of assignment is not referenceable.
L. 28: Identifier x is undeclared.
L. 28: Identifier x is undeclared.
L. 28: Operator array[] with incompatible types.
L. 28: Operator [] with incompatible types.
L. 28: Left expression of assignment is not referenceable.
L. 29: Identifier x is undeclared.
L. 29: Identifier x is undeclared.
L. 29: Operator array[] with incompatible types.
L. 29: Operator [] with incompatible types.
L. 29: Left expression of assignment is not referenceable.
L. 30: Identifier b is undeclared.
L. 30: Identifier f is undeclared.
L. 30: Left expression of assignment is not referenceable.
L. 31: Identifier b is undeclared.
L. 31: Identifier f is undeclared.
L. 31: Operator struct. with incompatible types.
L. 31: Left expression of assignment is not referenceable.
L. 32: Identifier b is undeclared.
L. 32: Identifier f is undeclared.
L. 32: Operator struct. with incompatible types.
L. 32: Left expression of assignment is not referenceable.
L. 33: Identifier x is undeclared.
L. 33: Identifier y is undeclared.
L. 33: Left expression of assignment is not referenceable.
There are errors: no code generated
